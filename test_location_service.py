#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã LocationService
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.location_service import LocationService
from app.models import ProductData

def test_location_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ ===\n")
    
    location_service = LocationService()
    
    test_locations = [
        "–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è", 
        "–ö–∏–µ–≤, –£–∫—Ä–∞–∏–Ω–∞",
        "–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
        "–ë–∏—à–∫–µ–∫, –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
        "Berlin, Germany",
        "Paris, France",
        "New York, USA",
        "Beijing, China",
        "Tokyo, Japan",
        "–ü—Ä–æ—Å—Ç–æ –ê–ª–º–∞—Ç—ã",
        "–£–ª–∏—Ü–∞ –ê–±–∞—è, 150, –ê–ª–º–∞—Ç—ã",
        "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ö—Ä–µ—â–∞—Ç–∏–∫, –ö–∏–µ–≤",
        "–ü—Ä–æ—Å—Ç–æ –≥–æ—Ä–æ–¥ –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"
    ]
    
    for location in test_locations:
        result = location_service.detect_country_and_language(location)
        print(f"–õ–æ–∫–∞—Ü–∏—è: {location}")
        print(f"  –°—Ç—Ä–∞–Ω–∞: {result['country_code']}")
        print(f"  –Ø–∑—ã–∫: {result['language']}")
        print(f"  –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: {result['primary_language']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è–∑—ã–∫–∏
        search_languages = location_service.get_search_languages(result['country_code'])
        print(f"  –Ø–∑—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_languages}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∞ –°–ù–ì
        is_cis = location_service.is_cis_country(result['country_code'])
        print(f"  –°–ù–ì —Å—Ç—Ä–∞–Ω–∞: {is_cis}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        local_sources = location_service.get_local_sources(result['country_code'])
        print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {local_sources[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        
        print()

def test_product_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===\n")
    
    location_service = LocationService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    test_products = [
        ProductData(
            product_name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
            amount="1000 —à—Ç—É–∫",
            date_and_time="2024-01-15T10:00:00",
            location="–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
        ),
        ProductData(
            product_name="–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            amount="50 —Ç–æ–Ω–Ω",
            date_and_time="2024-01-20T14:30:00", 
            location="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
        ),
        ProductData(
            product_name="–û–¥–µ–∂–¥–∞ –æ–ø—Ç–æ–º",
            amount="500 –µ–¥–∏–Ω–∏—Ü",
            date_and_time="2024-01-25T09:15:00",
            location="–ö–∏–µ–≤, –£–∫—Ä–∞–∏–Ω–∞"
        ),
        ProductData(
            product_name="–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
            amount="200 –∫–≥",
            date_and_time="2024-01-30T16:45:00",
            location="–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"
        )
    ]
    
    for i, product in enumerate(test_products, 1):
        print(f"–ü—Ä–æ–¥—É–∫—Ç {i}: {product.product_name}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.amount}")
        print(f"  –î–∞—Ç–∞: {product.date_and_time}")
        print(f"  –õ–æ–∫–∞—Ü–∏—è: {product.location}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        search_params = location_service.get_search_parameters(product)
        print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
        print(f"    –°—Ç—Ä–∞–Ω–∞: {search_params['country_code']}")
        print(f"    –Ø–∑—ã–∫: {search_params['language']}")
        print(f"    –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: {search_params['primary_language']}")
        print(f"    –Ø–∑—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_params['search_languages']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        multilingual_params = location_service.get_multilingual_search_params(product)
        print(f"  –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ ({len(multilingual_params)} —è–∑—ã–∫–æ–≤):")
        for j, params in enumerate(multilingual_params, 1):
            print(f"    {j}. {params['language']} ({params['country_code']})")
        
        print()

def test_regional_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ===\n")
    
    location_service = LocationService()
    
    test_countries = ["kz", "ru", "ua", "by", "uz", "kg", "de", "fr", "us", "cn"]
    
    for country in test_countries:
        print(f"–°—Ç—Ä–∞–Ω–∞: {country}")
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        local_sources = location_service.get_local_sources(country)
        print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {local_sources}")
        
        # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        trusted_sources = location_service.get_trusted_sources_by_region(country)
        print(f"  –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {trusted_sources}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ù–ì
        is_cis = location_service.is_cis_country(country)
        print(f"  –°–ù–ì: {is_cis}")
        
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LocationService\n")
    
    try:
        test_location_detection()
        test_product_data() 
        test_regional_sources()
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 