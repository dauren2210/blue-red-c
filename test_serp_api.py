#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SerpService —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º SerpApi
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.serp_service import SerpService
from app.services.location_service import LocationService
from app.models import ProductData

async def test_basic_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ ===\n")
    
    serp_service = SerpService()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    try:
        result = await serp_service.search(
            query="–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
            search_type="web",
            max_results=5
        )
        
        print(f"–ó–∞–ø—Ä–æ—Å: {result.query}")
        print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.search_time:.2f} —Å–µ–∫")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.total_results}")
        print(f"–î–≤–∏–∂–æ–∫: {result.engine}")
        
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, search_result in enumerate(result.results[:3], 1):
            print(f"{i}. {search_result.title}")
            print(f"   URL: {search_result.link}")
            print(f"   –°–Ω–∏–ø–ø–µ—Ç: {search_result.snippet[:100]}...")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()

async def test_location_based_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –ª–æ–∫–∞—Ü–∏–µ–π ===\n")
    
    serp_service = SerpService()
    location_service = LocationService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    product_data = ProductData(
        product_name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
        amount="1000 —à—Ç—É–∫",
        date_and_time="2024-01-15T10:00:00",
        location="–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
    )
    
    try:
        # –ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏
        result = await serp_service.search_suppliers(
            query="—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫",
            product_data=product_data,
            max_results=5
        )
        
        print(f"–ó–∞–ø—Ä–æ—Å: {result.query}")
        print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.search_time:.2f} —Å–µ–∫")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.total_results}")
        
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, search_result in enumerate(result.results[:3], 1):
            print(f"{i}. {search_result.title}")
            print(f"   URL: {search_result.link}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {search_result.source}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π: {e}")
        import traceback
        traceback.print_exc()

async def test_multilingual_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ===\n")
    
    serp_service = SerpService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    product_data = ProductData(
        product_name="–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        amount="50 —Ç–æ–Ω–Ω",
        date_and_time="2024-01-20T14:30:00",
        location="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
    )
    
    try:
        # –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        results = await serp_service.multilingual_search(
            query="—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫",
            product_data=product_data,
            max_results=3
        )
        
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤ –Ω–∞ {len(results)} —è–∑—ã–∫–∞—Ö")
        
        for i, result in enumerate(results, 1):
            print(f"\n–ü–æ–∏—Å–∫ {i}:")
            print(f"  –ó–∞–ø—Ä–æ—Å: {result.query}")
            print(f"  –í—Ä–µ–º—è: {result.search_time:.2f} —Å–µ–∫")
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.total_results}")
            
            if result.results:
                print(f"  –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.results[0].title}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()

async def test_location_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ ===\n")
    
    location_service = LocationService()
    
    test_locations = [
        "–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
        "–ö–∏–µ–≤, –£–∫—Ä–∞–∏–Ω–∞",
        "Berlin, Germany",
        "New York, USA"
    ]
    
    for location in test_locations:
        try:
            location_info = location_service.detect_country_and_language(location)
            print(f"–õ–æ–∫–∞—Ü–∏—è: {location}")
            print(f"  –°—Ç—Ä–∞–Ω–∞: {location_info['country_code']}")
            print(f"  –Ø–∑—ã–∫: {location_info['language']}")
            print(f"  –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: {location_info['primary_language']}")
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_languages = location_service.get_search_languages(location_info['country_code'])
            print(f"  –Ø–∑—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_languages}")
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location}: {e}")

async def test_search_with_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å fallback"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å fallback ===\n")
    
    serp_service = SerpService()
    
    try:
        # –ü–æ–∏—Å–∫ —Å fallback
        result = await serp_service.search_with_fallback(
            query="–æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            search_type="web",
            max_results=5
        )
        
        print(f"–ó–∞–ø—Ä–æ—Å: {result.query}")
        print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.search_time:.2f} —Å–µ–∫")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.total_results}")
        
        if result.results:
            print(f"–ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.results[0].title}")
        else:
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (fallback —Å—Ä–∞–±–æ—Ç–∞–ª)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å fallback: {e}")
        import traceback
        traceback.print_exc()

async def test_european_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===\n")
    
    serp_service = SerpService()
    european_cases = [
        ("electronics supplier", "Berlin, Germany"),
        ("food wholesaler", "Paris, France"),
        ("machinery distributor", "Rome, Italy"),
        ("building materials supplier", "Madrid, Spain"),
        ("chemical products supplier", "Warsaw, Poland"),
    ]
    
    for query, location in european_cases:
        product_data = ProductData(
            product_name=query,
            amount="",
            date_and_time=None,
            location=location
        )
        print(f"\n–°—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥: {location}")
        print(f"–ó–∞–ø—Ä–æ—Å: {query}")
        try:
            result = await serp_service.search_suppliers(
                query=query,
                product_data=product_data,
                max_results=3
            )
            print(f"  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.search_time:.2f} —Å–µ–∫")
            print(f"  –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.total_results}")
            for i, search_result in enumerate(result.results, 1):
                print(f"    {i}. {search_result.title}")
                print(f"       URL: {search_result.link}")
                print(f"       –°–Ω–∏–ø–ø–µ—Ç: {search_result.snippet[:100]}...")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SerpService —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º SerpApi\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        from app.core.config import settings
        if not settings.SERP_API_KEY:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: SERP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SERP_API_KEY")
            print("–¢–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å –ø—É—Å—Ç—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n")
        
        await test_location_detection()
        await test_basic_search()
        await test_location_based_search()
        await test_multilingual_search()
        await test_search_with_fallback()
        await test_european_scenarios()
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 